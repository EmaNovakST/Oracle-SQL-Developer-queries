--ispisi ime, posao i placu iz emp tablice gdje je broj odjela 30
SELECT ename, job, sal FROM emp
WHERE deptno = 30;

--odaberi iz emp podatke s poslom CLERK i brojem odjela 20
SELECT * FROM emp
WHERE job = 'CLERK' AND deptno = 20;

--ispisi sve podatke gdje je posao MANAGER ili CLERK
SELECT * FROM emp
WHERE job = 'MANAGER' OR job = 'CLERK';

--ispisi podatke za posao CLERK gdje je broj odjela 20 ili 30 (zagrade se prvo izvrse, pa onda AND i onda OR)
SELECT * FROM emp
WHERE job = 'CLERK' AND (deptno = 20 OR deptno = 30);

--ispisi sve CLERK zaposlenike iz odjela 20 i sve zaposlenike iz odjela 30
SELECT * FROM emp
WHERE (job = 'CLERK' AND deptno = 20) OR deptno = 30;

--ispisi sve zaposlenike CLERK i MANAGER iz odjela 20 i 30
SELECT * FROM emp
WHERE (job = 'MANAGER' OR job = 'CLERK') AND (deptno = 20 OR deptno = 30);

--ispisi sve clerkove iz odjela 20 i sve managere iz odjela 30
SELECT * FROM emp
WHERE (job = 'MANAGER' AND deptno = 30) OR (job = 'CLERK' AND deptno = 20);

--ispisi poslove MANAGER, CLERK i ANALYST
SELECT * FROM emp
WHERE job IN ('MANAGER', 'CLERK', 'ANALYST');

--ispisi sve poslove osim ovih gore
SELECT * FROM emp
WHERE job NOT IN ('MANAGER','CLERK','ANALYST');

--ispisi sve place izmedu 1500 i 3000
SELECT * FROM emp
WHERE sal BETWEEN 1500 AND 3000;

--ispisi place manje od 1500 i vece od 3000
SELECT * FROM emp
WHERE sal NOT BETWEEN 1500 AND 3000;

--ispisi sve poslove, ali samo jednom
SELECT DISTINCT job FROM emp;

--ispisi sve poslove i odjele ali samo jednom (sve kombinacije su samo jednom napisane)
SELECT DISTINCT job, deptno FROM emp;

--ispisi sve place od najvece do najmanje
SELECT sal FROM emp
ORDER BY sal DESC;

--ispisi sve podatke iz odjela 30 i poredaj place od najvece do najmanje
SELECT * FROM emp
WHERE deptno = 30
ORDER BY sal DESC;

--ispisi sve odjele po redu i place u njima isto po redu
SELECT * FROM emp
ORDER BY deptno,sal;

--ispisi sve poslove, imena odjela i brojeve odjela iz tablica emp i dept bez ponavljanja
SELECT job, deptno FROM emp --ovo ne daje ovo gore
UNION 
SELECT dname, deptno FROM dept;

/*rjesenje koje daje ovo pitanje;*/
SELECT DISTINCT job,dname,deptno FROM emp NATURAL JOIN dept ORDER BY deptno;

--pokazi komisiju (commission) s NULL vrijednostima iz emp
SELECT * FROM emp
WHERE comm IS NULL;

--zbroji svu placu i komisiju (ukljucujuci i NULL vrijednosti) i ispisi imena placu i komisiju i taj zbroj
SELECT ename, sal, comm, sal + NVL(comm, 0) AS zarada FROM emp;

--ovo gore ali s NVL2 (prva vrijednost mora biti s NULL da dobijemo broj
SELECT ename, sal, comm, NVL2(comm,sal + comm, sal) AS zarada FROM emp; 

--ispisi bilo koju vrijednost od ovih (placa, komisija, stipendija) iz tablice employee
SELECT ename, job, COALESCE (salary, commission, stipend) AS zarada FROM employee;

--izlistaj sve zaposlenike iz emp koji su u dept odjelu ACCOUNTING i RESEARCH
SELECT * FROM emp
WHERE deptno IN (SELECT deptno FROM dept
                WHERE dname IN ('ACCOUNTING', 'RESEARCH'));
                
--izlistaj sve zaposlenike koji imaju istu komisiju kao SCOTT cija je komisija NULL
SELECT * FROM emp
WHERE NVL(comm, -1) = (SELECT NVL(comm, -1) FROM emp
                       WHERE ename = 'SCOTT');
                       
--izlistaj sve zaposlenike koji imaju istu placu i rade u istom odjelu kao i WARD (set comparisson)
SELECT * FROM emp
WHERE (deptno, sal) = (SELECT deptno, sal FROM emp
                       WHERE ename = 'WARD');
                       
--izlistaj sve zaposlenike koji imaju istu placu i rade u istom odjelu kao i WARD (correlated subquery)
SELECT * FROM emp e1
WHERE sal = (SELECT sal FROM emp e2
             WHERE e2.deptno = e1.deptno AND ename = 'WARD');

--izlistaj samo imena odjela iz dept koji imaju zaposlenike iz emp
SELECT dname FROM dept d
WHERE EXISTS (SELECT deptno FROM emp e
              WHERE e.deptno = d.deptno);
                
--izlistaj sve zaposlenike koji imaju vecu placu od najvece place izmedu Turnera, Millera, Clarka (ALL je umjesto vise AND)
SELECT * FROM emp
WHERE sal > ALL (SELECT sal FROM emp WHERE ename IN ('TURNER', 'MILLER', 'CLARK'));
                
--izlistaj sve zaposlenike koji imaju manju placu od najmanje place izmedu Turnera, Millera, Clarka (ANY je umjesto vise OR)
SELECT * FROM emp
WHERE sal < ANY (SELECT sal FROM emp WHERE ename IN ('TURNER', 'MILLER', 'CLARK'));

--izlistaj imena zaposlenika i njihovih odjela iz emp i dept tablica (equijoin)
SELECT ename, dname FROM emp e, dept d
WHERE e.deptno = d.deptno;

--izlistaj imena zaposlenika i njihovih odjela iz emp i dept tablica (inner join)
SELECT ename, dname FROM emp INNER JOIN dept USING(deptno);

--izlistaj imena zaposlenika i njihovih odjela iz emp i dept tablica (natural join)
SELECT ename, dname FROM emp NATURAL JOIN dept;

--izlistaj imena zaposlenika zajedno s imenima njihovih menadera iz tablice emp (self join)
SELECT e1.ename AS zaposlenik, e2.ename AS menader FROM emp e1, emp e2
WHERE e1.mgr = e2.empno;

--izlistaj sve odjele, ukljucujuci i one koji nemaju zaposlenike (Oracle outer join)
SELECT ename, dname FROM emp e, dept d
WHERE e.deptno(+) = d.deptno;

--izlistaj sve zaposlenike, ukljucujuci i one koji nemaju odjele (Oracle outer join)
SELECT ename, dname FROM emp e, dept d
WHERE e.deptno = d.deptno(+);

--izlistaj sve odjele, ukljucujuci i one bez zaposlenika (right outer join)
SELECT ename, dname FROM emp RIGHT OUTER JOIN dept USING (deptno);

--izlistaj sve zaposlenike, ukljucujuci i one koji nemaju odjele (left outer join)
SELECT ename, dname FROM emp LEFT OUTER JOIN dept USING (deptno);

--izlistaj sve zaposlenike i sve odjele (full outer join)
SELECT ename, dname FROM emp FULL OUTER JOIN dept USING (deptno);

--ispisi maksimalnu placu iz emp tablice
SELECT MAX(sal) FROM emp;

--izlistaj odjele s prosjecnim placama i ispisi brojeve odjela
SELECT deptno, AVG(sal) AS prosjecna FROM emp
GROUP BY deptno;

--izlistaj prosjecne place odjela i njihove odjele s placom vecom od 2000
SELECT deptno, AVG(sal) AS prosjecna FROM emp
GROUP BY deptno
HAVING AVG(sal) > 2000;

--izlistaj brojeve odjela s najvisom prosjecnom placom u odjelu (koriste se nested group funkcije) AVG je unutar (nested) u MAX funkciji
SELECT deptno, AVG(sal) AS average FROM emp
GROUP BY deptno
HAVING AVG(sal) = (SELECT MAX(AVG(sal)) FROM emp
                   GROUP BY deptno);

--izlistaj imena zaposlenika s njihovim placama koji su najplaceniji u svojim odjelima
SELECT ename, sal, deptno FROM emp
WHERE (deptno, sal) IN (SELECT deptno, MAX(sal) FROM emp
                        GROUP BY deptno);
                        
--ispisi sumu svih zaposlenika odjela i sveukupnu placu za pojedine odjele
SELECT deptno, job, SUM(sal) AS suma_placa FROM emp
GROUP BY ROLLUP(deptno, job)
ORDER BY deptno, job;

--izlistaj sumu svih zaposlenika odjela i sveukupnu placu za pojedine odjele kao i sumu placa svih poslova bez brojeva odjela
SELECT deptno, job, SUM(sal) AS suma_placa FROM emp
GROUP BY CUBE(deptno, job)
ORDER BY deptno, job;

--ispisi niz 12345678 kao broj u dolarima
SELECT to_char(12345678, '$99,999,999') FROM DUAL;

--ispisi vrijeme u formatu npr 12/01/2002
SELECT to_char(sysdate, 'dd/mm/yyyy') FROM DUAL;

--napisi koji je dan danas po julijanskom kalendaru
SELECT to_char(sysdate, 'j') FROM DUAL;

--napisi rjecima danasnji dan po julijanskom kalendaru (2459088)
SELECT to_char(to_date('2459088', 'j'), 'jsp') FROM DUAL;

--izracunaj korijen broja 81
SELECT sqrt(81) AS korijen FROM DUAL;

--izracunaj 7 na drugu potenciju
SELECT power(7, 2) FROM DUAL;

--zaokruzi ovaj broj na dvije decimale 1234.8652
SELECT round(1234.8652, 2) FROM DUAL;

--izbroji duljinu iduceg stringa 'pokemon'
SELECT length('pokemon') FROM DUAL;

--od rijeci 'otorinolaringologija' prikazi samo rijec 'laringolog'
SELECT substr('otorinolaringologija', 8, 10) FROM DUAL;

--napisi datum iduceg petka u mjesecu
SELECT next_day(sysdate, 'petak') FROM DUAL;

--kreiraj tablicu test koja ima 4 kolumne: a,b,c,d gdje je a ima 10 charactera, b ima 10
--variranih charactera, c je datum i d je broj koji maksimalno moze biti 999.99 i umetni neke vrijednosti u nju
CREATE TABLE test (a char(10),
                   b varchar2(10), 
                   c date,
                   d number(5, 2));
INSERT INTO test VALUES ('Tokyo', 'Rio', '21-8-2002', 123.45);
INSERT INTO test VALUES ('Denver', 'Moscow', '11-1-1995', 345.67);

--kopiraj postojecu tablicu emp s razlicitim imenima kolumna, ali bez ikakvih podataka
CREATE TABLE empcopy3 (empid, name, designation, salary, dno)
AS SELECT empno, ename,job, sal, deptno FROM emp
WHERE 1 = 0;

--izmjeni tablicu test tako da dodas kolumne e i f gdje e ima 10 variranih charactera i f je broj
ALTER TABLE test ADD (e varchar(10),
                      f number);

--izbrisi kolumnu f u tablici table i promijeni tip podatka a u 10 variranih charactera
ALTER TABLE test DROP (f);
ALTER TABLE test MODIFY (a varchar2(10));

--izmjeni ime kolumne b u bee i izmjeni ime tablice iz test u gradove
ALTER TABLE test RENAME COLUMN b TO bee;
RENAME test TO gradovi;

--napravi tablicu novi_test s kolumnama a koja je i primary key i number koji najveci moze biti 9999, b isi broj ali 
--mora biti vrijednost, i c koji ce provjeravati je li broj u b izmedu 1500 i 3000 i da c mora biti jedinstven
CREATE TABLE novi_test (a number (4),
                        CONSTRAINT pk_ntest PRIMARY KEY(a),
                        b number (4) NOT NULL,
                        c number (4),
                        CONSTRAINT ch_ntest CHECK (b BETWEEN 1500 AND 3000),
                        CONSTRAINT uk_ntest UNIQUE (c));
                        
--napravi tablicu testd koja ce imati kolumnu a koja ce biti strani kljuc i referirati ce se na novi_test
CREATE TABLE testd (x number,
                    y number,
                    a number (4) CONSTRAINT fk_testd REFERENCES novi_test(a));
                    
--daj povisicu zaposlenicima cija je placa menader (povisica od 300), analist (200) i clerk (100)
SELECT ename, job, sal, sal + DECODE (job, 'MANAGER', 300,
                                           'ANALYST', 200,
                                           'CLERK', 100, 0) AS nova_placa
FROM emp;

--daj povisicu zaposlenicima isto kao i gore samo s drugom funkcijom
SELECT ename, job, sal, sal + (CASE WHEN job = 'MANAGER' THEN 300
                                    WHEN job = 'ANALYST' THEN 200
                                    WHEN job = 'CLERK' THEN 100
                                    ELSE 0 END) AS nova_placa
FROM emp;     

--povecaj placu zaposlenicima ako im je placa: do 1500 povecanje od 300, od 1501-2450 povecanje od 200,
--2451-3000 povecanje od 100 i iznad 3000 nista
SELECT ename, job, sal, sal + (CASE WHEN sal <= 1500 THEN 300
                                    WHEN sal <= 2450 THEN 200
                                    WHEN sal <= 3000 THEN 100
                                    ELSE 0 END) AS nova_placa
FROM emp;  

--napisi novu placu ako zaposlenici koji imaju placu 1000 dobe bonus od 100,
--oni koji imaju komisiju dobe 200 i menaderi dobe 300
SELECT ename, job, sal, comm, sal + (CASE WHEN sal <= 1000 THEN 100
                                          WHEN comm IS NOT NULL THEN 200
                                          WHEN job = 'MANAGER' THEN 300
                                          ELSE 0 END) AS nova_placa
FROM emp;     
ROLLBACK;

--izlistaj rangove zaposlenika po placi prema odjelima s imenima, odjelima i placom
SELECT ename, deptno, sal, RANK() OVER (PARTITION BY deptno ORDER BY sal DESC) AS rang
FROM emp;

--nadi rang osobe cija je placa 1250 i komisija je 500
SELECT RANK(1250, 500) WITHIN GROUP (ORDER BY sal DESC, comm DESC) AS rang
FROM emp;

--izlistaj sve rankove po redu svih zaposlenika po placi s njihovim imenima, odjelima i placom
SELECT ename, deptno, sal, DENSE_RANK() OVER (ORDER BY sal DESC) AS rang
FROM emp;

--nadi zaposlenike ciji rang place je normalni deveti po redu i ispisi i broj odjela, ime i placu
SELECT ename, deptno, sal FROM (SELECT ename, deptno, sal, DENSE_RANK()
                                OVER (ORDER BY sal DESC) AS deveti
                                FROM emp)
WHERE deveti = 9;     

--izlistaj imena i placu zaposlenika koji imaju devetu po redu najvecu placu
SELECT ename, sal FROM emp
WHERE sal = (SELECT DISTINCT sal FROM emp e1
             WHERE (SELECT COUNT(DISTINCT sal) FROM emp e2
                    WHERE e1.sal <= e2.sal) = 9);
                    
--izracunaj kumulativnu sumu placa (da u tablici zbraja svaku prijasnju sa svakom iducom placom i
--na kraju daje sveukupni zbroj)
SELECT e1.empno, e1.ename, e1.sal, SUM(e2.sal) AS suma FROM emp e1, emp e2
WHERE e1.empno >= e2.empno
GROUP BY e1.empno, e1.ename, e1.sal
ORDER BY suma;


--napisi tablicu s poslovima menadera, analiticara, cinovnika gdje ce pisati svaki broj odjela i
--gdje ce biti zbrojena placa za svaki odjel svakog posla
SELECT deptno, SUM(DECODE(job, 'MANAGER', sal)) AS menader,
               SUM(DECODE(job, 'ANALYST', sal)) AS analiticar,
               SUM(DECODE(job, 'CLERK', sal)) AS cinovnik
FROM emp
GROUP BY deptno
ORDER BY deptno;

--izbrisi duplikate podataka u tablici t (red je a)
DELETE FROM t
WHERE rowid NOT IN (SELECT MIN(rowid) FROM t
                    GROUP BY (a));
  
 --promijeni tablicu da povecas placu zaposlenicima koji imaju manju placu
 --od srednje place svog odjela, na maksimalnu placu u odjelu    
UPDATE emp e1 SET sal = (SELECT MAX(sal) FROM emp e2
                         WHERE e2.deptno = e1.deptno)
WHERE sal < (SELECT AVG(sal) FROM emp e3
             WHERE e3.deptno = e1.deptno);
SELECT * FROM emp;
ROLLBACK;

--izbrisi iz tablice zaposlenike cija je placa veca od prosjecne place u tom odjelu
DELETE FROM emp e1
WHERE sal > (SELECT AVG(sal) FROM emp e2
             WHERE e2.deptno = e1.deptno);
SELECT * FROM emp;
ROLLBACK;

--ispisi hijerarhiju menadera (sto ima vise crtica to je nize na hijerarhiji)
SELECT empno, rpad('|', (level - 1) * 3, '-')||ename AS hierarchy FROM emp
CONNECT BY PRIOR empno = mgr
START WITH ename = 'KING'

--stvori pogled (view) s brojem zaposlenika, imenom, placom, poslom i brojem odjela iz tablice emp
DROP VIEW empview;
CREATE VIEW empview AS
SELECT empno, ename, sal, job, deptno FROM emp;

--u pogledu empview povecaj SCOTTu placu na 4000 i dodaj red zaposlenika DANIELA
--koji ima placu 2500, u odjelu 20, i broj je 1122 i prodavac je
UPDATE empview SET sal = 4000
WHERE ename = 'SCOTT';
INSERT INTO empview VALUES (1122, 'DANIEL', 2500, 'SALESMAN', 20);
ROLLBACK;

--stvori pogled iz tablice emp i dept s imenima, brojem zaposlenika, poslom, placom, brojem odjela, imenom odjela i lokacijom
CREATE OR REPLACE VIEW empdept AS
SELECT empno, ename, job, sal, e.deptno, dname, loc
FROM emp e, dept d
WHERE e.deptno = d.deptno;
SELECT * FROM empdept;

--napravi pogled na odjel 30 gdje se nista ne moze mijenjati
CREATE OR REPLACE VIEW empview AS
SELECT empno, ename, job, sal, deptno FROM emp
WHERE deptno = 30
WITH READ ONLY;
ROLLBACK;

SELECT ename,'SQLDEV:GAUGE:1:5200:1000:3000:' || sal sal_gauge, sal --napravimo gauge koji nam vizualno pokaze visine place npr
FROM emp
ORDER BY sal DESC;

SELECT job || ' ' || ename AS zaposlenik FROM emp;

SELECT level, empno, mgr, ename FROM emp
CONNECT BY PRIOR empno=mgr
START WITH ename= 'KING'
ORDER BY level;

SELECT rpad(' ', (level - 1) * 3)||ename AS hijerarhija FROM emp
CONNECT BY PRIOR empno=mgr
START WITH ename = 'KING'



